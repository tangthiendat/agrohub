x-kong-config: &kong-env
  KONG_DATABASE: postgres
  KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  KONG_PG_HOST: kong-db
  KONG_PG_USER: ${KONG_PG_USER:-kong}
  KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}

volumes:
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  redis:
    driver: local
  axonserver-data:
    driver: local
    driver_opts:
      type: none
      device: ${DOCKER_DATA}/ct553/axon-server/data
      o: bind
  axonserver-events:
    driver: local
    driver_opts:
      type: none
      device: ${DOCKER_DATA}/ct553/axon-server/event
      o: bind
  axonserver-config:
    driver: local
    driver_opts:
      type: none
      device: ${DOCKER_DATA}/ct553/axon-server/config
      o: bind

networks:
  agrohub:
    external: true

services:
  kong-migrations:
    image: "${KONG_DOCKER_TAG:-kong:3.9}"
    container_name: kong-migrations
    command: kong migrations bootstrap
    depends_on:
      - kong-db
    environment:
      <<: *kong-env
    networks:
      - agrohub
    restart: on-failure

  kong-migrations-up:
    image: "${KONG_DOCKER_TAG:-kong:3.9}"
    container_name: kong-migrations-up
    command: kong migrations up && kong migrations finish
    depends_on:
      - kong-db
    environment:
      <<: *kong-env
    networks:
      - agrohub
    restart: on-failure

  kong-internal:
    image: "${KONG_DOCKER_TAG:-kong:3.9}"
    user: "${KONG_USER:-kong}"
    container_name: kong-internal
    environment:
      <<: *kong-env
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000}"
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001}"
      KONG_ADMIN_GUI_LISTEN: "${KONG_ADMIN_GUI_LISTEN:-0.0.0.0:8002}"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
      KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
      KONG_UNTRUSTED_LUA_SANDBOX_REQUIRES: resty.jwt
    networks:
      - agrohub
    ports:
      # The following two environment variables default to an insecure value (0.0.0.0)
      # according to the CIS Security test.
      - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:8000:8000/tcp"
      - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8443:8443/tcp"
      # Making them mandatory but undefined, like so would be backwards-breaking:
      # - "${KONG_INBOUND_PROXY_LISTEN?Missing inbound proxy host}:8000:8000/tcp"
      # - "${KONG_INBOUND_SSL_PROXY_LISTEN?Missing inbound proxy ssl host}:8443:8443/tcp"
      # Alternative is deactivating check 5.13 in the security bench, if we consider Kong's own config to be enough security here

      - "8001:8001/tcp"
      - "8444:8444/tcp"
      - "8002:8002/tcp"
    restart: on-failure:5
    read_only: true
    volumes:
      - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - kong_tmp_vol:/tmp
      - ./config:/opt/kong
    security_opt:
      - no-new-privileges

  kong-db:
    image: postgres:16.4-alpine
    container_name: kong-db
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD:-kong}
    restart: on-failure
    stdin_open: true
    tty: true
    networks:
      - agrohub
    ports:
      - "5432:5432"
    volumes:
      - ${DOCKER_DATA}/ct553/kong-internal:/var/lib/postgresql/data

  axon-server:
    image: axoniq/axonserver:2024.2.2
    container_name: axon-server
    hostname: axonserver
    environment:
      AXONIQ_AXONSERVER_STANDALONE: true
    volumes:
      - axonserver-data:/data
      - axonserver-events:/eventdata
      - axonserver-config:/config:ro
    ports:
      - "8024:8024"
      - "8124:8124"
      - "8224:8224"
    networks:
      - agrohub

  redis:
    image: redis/redis-stack-server:7.4.0-v2
    container_name: redis
    volumes:
      - redis:/data
    ports:
      - "6379:6379"
    networks:
      - agrohub

  user-service-db:
    image: mariadb:11.6-noble
    container_name: user-service-db
    environment:
      MARIADB_DATABASE: user_service
      MARIADB_ROOT_PASSWORD: 123456
    ports:
      - "3306:3306"
    volumes:
      - ${DOCKER_DATA}/ct553/user-service:/var/lib/mysql:Z
    networks:
      - agrohub

  product-service-db:
    image: mariadb:11.6-noble
    container_name: product-service-db
    environment:
      MARIADB_DATABASE: product_service
      MARIADB_ROOT_PASSWORD: 123456
    ports:
      - "3307:3307"
    volumes:
      - ${DOCKER_DATA}/ct553/product-service:/var/lib/mysql:Z
      - ./config/product-service-db.cnf:/etc/mysql/conf.d/product-service-db.cnf
    command: --defaults-extra-file=/etc/mysql/conf.d/product-service-db.cnf
    networks:
      - agrohub

  inventory-service-db:
    image: postgres:16.4-alpine
    container_name: inventory-service-db
    environment:
      POSTGRES_DB: inventory_service
      POSTGRES_USER: inventory_service
      POSTGRES_PASSWORD: 123456
    ports:
      - "5433:5433"
    volumes:
      - ${DOCKER_DATA}/ct553/inventory-service:/var/lib/postgresql/data
      - ./config/inventory-service-db.conf:/etc/postgresql/inventory-service-db.conf
    command: -c config_file=/etc/postgresql/inventory-service-db.conf
    networks:
      - agrohub

  purchase-service-db:
    image: postgres:16.4-alpine
    container_name: purchase-service-db
    environment:
      POSTGRES_DB: purchase_service
      POSTGRES_USER: purchase_service
      POSTGRES_PASSWORD: 123456
    ports:
      - "5434:5434"
    volumes:
      - ${DOCKER_DATA}/ct553/purchase-service:/var/lib/postgresql/data
      - ./config/purchase-service-db.conf:/etc/postgresql/purchase-service-db.conf
    command: -c config_file=/etc/postgresql/purchase-service-db.conf
    networks:
      - agrohub

  debt-service-db:
    image: postgres:16.4-alpine
    container_name: debt-service-db
    environment:
      POSTGRES_DB: debt_service
      POSTGRES_USER: debt_service
      POSTGRES_PASSWORD: 123456
    ports:
      - "5435:5435"
    volumes:
      - ${DOCKER_DATA}/ct553/debt-service:/var/lib/postgresql/data
      - ./config/debt-service-db.conf:/etc/postgresql/debt-service-db.conf
    command: -c config_file=/etc/postgresql/debt-service-db.conf
    networks:
      - agrohub

  customer-service-db:
    image: postgres:16.4-alpine
    container_name: customer-service-db
    environment:
      POSTGRES_DB: customer_service
      POSTGRES_USER: customer_service
      POSTGRES_PASSWORD: 123456
    ports:
      - "5436:5436"
    volumes:
      - ${DOCKER_DATA}/ct553/customer-service:/var/lib/postgresql/data
      - ./config/customer-service-db.conf:/etc/postgresql/customer-service-db.conf
    command: -c config_file=/etc/postgresql/customer-service-db.conf
    networks:
      - agrohub

  sales-service-db:
    image: postgres:16.4-alpine
    container_name: sales-service-db
    environment:
      POSTGRES_DB: sales_service
      POSTGRES_USER: sales_service
      POSTGRES_PASSWORD: 123456
    ports:
      - "5437:5437"
    volumes:
      - ${DOCKER_DATA}/ct553/sales-service:/var/lib/postgresql/data
      - ./config/sales-service-db.conf:/etc/postgresql/sales-service-db.conf
    command: -c config_file=/etc/postgresql/sales-service-db.conf
    networks:
      - agrohub

  kafka:
    image: confluentinc/cp-kafka:7.8.0
    container_name: kafka
    hostname: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_LISTENERS: "INTERNAL://kafka1:29092,CONTROLLER://kafka1:29093,EXTERNAL://0.0.0.0:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka1:29092,EXTERNAL://localhost:9092"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka1:29093"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      CLUSTER_ID: "ZGI5YjMwZmNiODI1MTFlZm"
      KAFKA_LOG_DIRS: "/tmp/kraft-logs"


  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:v0.7.2
    ports:
      - "9000:9000"
    depends_on:
      - kafka
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_NAME: "my-kafka-cluster"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka1:29092"
      SERVER_PORT: 9000
      # volumes:
      #   - kui/config.yml:/etc/kafkaui/dynamic_config.yaml