x-kong-config: &kong-env
  KONG_DATABASE: postgres
  KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  KONG_PG_HOST: kong-db
  KONG_PG_USER: ${KONG_PG_USER:-kong}
  KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password

volumes:
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  redis:
    driver: local

networks:
  agrohub:
    external: true

services:
  kong-migrations:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    container_name: kong-migrations
    command: kong migrations bootstrap
    profiles: ["database"]
    depends_on:
      - kong-db
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    networks:
      - agrohub
    restart: on-failure

  kong-migrations-up:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    container_name: kong-migrations-up
    command: kong migrations up && kong migrations finish
    profiles: ["database"]
    depends_on:
      - kong-db
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    networks:
      - agrohub
    restart: on-failure

  kong:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    user: "${KONG_USER:-kong}"
    container_name: kong-gateway
    environment:
      <<: *kong-env
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000}"
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001}"
      KONG_ADMIN_GUI_LISTEN: "${KONG_ADMIN_GUI_LISTEN:-0.0.0.0:8002}"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
      KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
    secrets:
      - kong_postgres_password
    networks:
      - agrohub
    ports:
      # The following two environment variables default to an insecure value (0.0.0.0)
      # according to the CIS Security test.
      - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:8000:8000/tcp"
      - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8443:8443/tcp"
      # Making them mandatory but undefined, like so would be backwards-breaking:
      # - "${KONG_INBOUND_PROXY_LISTEN?Missing inbound proxy host}:8000:8000/tcp"
      # - "${KONG_INBOUND_SSL_PROXY_LISTEN?Missing inbound proxy ssl host}:8443:8443/tcp"
      # Alternative is deactivating check 5.13 in the security bench, if we consider Kong's own config to be enough security here

      - "8001:8001/tcp"
      - "8444:8444/tcp"
      - "8002:8002/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5
    read_only: true
    volumes:
      - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - kong_tmp_vol:/tmp
      - ./config:/opt/kong
    security_opt:
      - no-new-privileges

  kong-db:
    image: postgres:16.4-alpine
    profiles: ["database"]
    container_name: kong-db
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${KONG_PG_DATABASE:-kong}", "-U", "${KONG_PG_USER:-kong}"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true
    networks:
      - agrohub
    volumes:
      - ${DOCKER_DATA}/ct553/kong-gateway:/var/lib/postgresql/data
      
  axon-server:
    image: axoniq/axonserver
    container_name: axon-server
    hostname: axonserver
    volumes:
      - ${DOCKER_DATA}/ct553/axon-server/data:/data
      - ${DOCKER_DATA}/ct553/axon-server/event:/eventdata
      - ${DOCKER_DATA}/ct553/axon-server/config:/config:ro
    ports:
      - "8024:8024"
      - "8124:8124"
      - "8224:8224"
    networks:
      - agrohub

  auth-service-db:
    image: postgres:16.4-alpine
    container_name: auth-service-db
    environment:
      POSTGRES_DB: auth_service
      POSTGRES_USER: auth_service
      POSTGRES_PASSWORD: 123456
    ports:
      - "5433:5432"
    volumes:
      - ${DOCKER_DATA}/ct553/auth-service:/var/lib/postgresql/data
    networks:
      - agrohub

  redis:
    image: redis/redis-stack-server:latest
    container_name: ct553-redis
    volumes:
      - redis:/data
    ports:
      - "6379:6379"
    networks:
      - agrohub

secrets:
  kong_postgres_password:
    file: ./KONG_POSTGRES_PASSWORD.txt
